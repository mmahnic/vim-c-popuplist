Index: if_python.c
===================================================================
--- if_python.c	(revision 1626)
+++ if_python.c	(working copy)
@@ -2031,10 +2031,16 @@
     }
     else if (strcmp(name, "height") == 0)
 	return Py_BuildValue("l", (long)(this->win->w_height));
-#ifdef FEAT_VERTSPLIT
     else if (strcmp(name, "width") == 0)
 	return Py_BuildValue("l", (long)(W_WIDTH(this->win)));
-#endif
+#ifdef FEAT_PYTHON_SCREEN
+    else if (strcmp(name, "top") == 0)
+	return Py_BuildValue("l", (long)(W_WINROW(this->win)));
+    else if (strcmp(name, "left") == 0)
+	return Py_BuildValue("l", (long)(W_WINCOL(this->win)));
+    else if (strcmp(name, "wcursor") == 0)
+	return Py_BuildValue("(ll)", (long)(this->win->w_wrow), (long)(this->win->w_wcol));
+#endif // FEAT_PYTHON_SCREEN
     else if (strcmp(name,"__members__") == 0)
 	return Py_BuildValue("[sss]", "buffer", "cursor", "height");
     else
@@ -2234,6 +2240,106 @@
     return NULL;
 }
 
+
+/* Screen object - Definitions
+ */
+
+#ifdef FEAT_PYTHON_SCREEN
+typedef struct
+{
+    PyObject_HEAD
+}
+ScreenObject;
+
+static PyObject * ScreenGetattr(PyObject *self, char *name);
+static PyObject * ScreenPuts(PyObject *self, PyObject *args);
+static PyObject * ScreenGetHighlightAttr(PyObject *self, PyObject *args);
+
+static struct PyMethodDef ScreenMethods[] = {
+    /* name,	    function,		calling,    documentation */
+    {"puts",	     ScreenPuts,	METH_VARARGS,	    "row, col, attr, str, len=-1" },
+    {"getHighlightAttr", ScreenGetHighlightAttr, METH_VARARGS, "name" },
+    { NULL,	    NULL,		0,	    NULL }
+};
+
+static PyTypeObject ScreenType = {
+    PyObject_HEAD_INIT(0)
+    0,
+    "screen",
+    sizeof(ScreenObject),
+    0,
+
+    (destructor)    0,			/* tp_dealloc,	refcount==0  */
+    (printfunc)     0,			/* tp_print,	print x      */
+    (getattrfunc)   ScreenGetattr,			/* tp_getattr,	x.attr	     */
+    (setattrfunc)   0,			/* tp_setattr,	x.attr=v     */
+    (cmpfunc)	    0,			/* tp_compare,	x>y	     */
+    (reprfunc)	    0,			/* tp_repr,	`x`, print x */
+
+    0,  /* as number */
+    0,  /* as sequence */
+    0,  /* as mapping */
+
+    (hashfunc) 0,			/* tp_hash, dict(x) */
+    (ternaryfunc) 0,			/* tp_call, x()     */
+    (reprfunc) 0,			/* tp_str,  str(x)  */
+};
+
+/* Screen object - Implementation
+ */
+
+    static PyObject *
+ScreenGetattr(PyObject *self, char *name)
+{
+#ifdef FEAT_MOUSE
+   if (strcmp(name, "mousex") == 0)
+      return Py_BuildValue("l", (long)(mouse_col));
+   if (strcmp(name, "mousey") == 0)
+      return Py_BuildValue("l", (long)(mouse_row));
+#endif
+   return Py_FindMethod(ScreenMethods, self, name);
+}
+
+    static PyObject *
+ScreenPuts(PyObject *self, PyObject *args)
+{
+    char_u *str;
+    int row, col, attr;
+    int len = -1;
+
+    if (!PyArg_ParseTuple(args, "iiis|i", &row, &col, &attr, &str, &len))
+        return NULL;
+
+    Py_BEGIN_ALLOW_THREADS
+    Python_Lock_Vim();
+    screen_puts_len(str, len, row, col, attr);
+    Python_Release_Vim();
+    Py_END_ALLOW_THREADS
+
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+    static PyObject *
+ScreenGetHighlightAttr(PyObject *self, PyObject *args)
+{
+    char_u *name;
+    int id, attr;
+
+    if (!PyArg_ParseTuple(args, "s", &name))
+        return NULL;
+
+    Py_BEGIN_ALLOW_THREADS
+    Python_Lock_Vim();
+    id = syn_name2id(name);
+    attr = syn_id2attr(id);
+    Python_Release_Vim();
+    Py_END_ALLOW_THREADS
+
+    return Py_BuildValue("l", (long)attr);
+}
+#endif // FEAT_PYTHON_SCREEN
+
 /* Current items object - Definitions
  */
 
@@ -2342,6 +2448,13 @@
     PyObject_HEAD_INIT(&WinListType)
 };
 
+#ifdef FEAT_PYTHON_SCREEN
+static ScreenObject TheScreen =
+{
+    PyObject_HEAD_INIT(&ScreenType)
+};
+#endif // FEAT_PYTHON_SCREEN
+
 static CurrentObject TheCurrent =
 {
     PyObject_HEAD_INIT(&CurrentType)
@@ -2362,6 +2475,9 @@
     BufListType.ob_type = &PyType_Type;
     WinListType.ob_type = &PyType_Type;
     CurrentType.ob_type = &PyType_Type;
+#ifdef FEAT_PYTHON_SCREEN
+    ScreenType.ob_type = &PyType_Type;
+#endif // FEAT_PYTHON_SCREEN
 
     /* Set sys.argv[] to avoid a crash in warn(). */
     PySys_SetArgv(1, argv);
@@ -2375,6 +2491,9 @@
     PyDict_SetItemString(dict, "buffers", (PyObject *)(void *)&TheBufferList);
     PyDict_SetItemString(dict, "current", (PyObject *)(void *)&TheCurrent);
     PyDict_SetItemString(dict, "windows", (PyObject *)(void *)&TheWindowList);
+#ifdef FEAT_PYTHON_SCREEN
+    PyDict_SetItemString(dict, "screen", (PyObject *)(void *)&TheScreen);
+#endif // FEAT_PYTHON_SCREEN
 
     if (PyErr_Occurred())
 	return -1;
Index: eval.c
===================================================================
--- eval.c	(revision 1626)
+++ eval.c	(working copy)
@@ -11691,6 +11691,9 @@
 	"python",
 #endif
 #endif
+#ifdef FEAT_PYTHON_SCREEN
+	"python_screen",
+#endif
 #ifdef FEAT_POSTSCRIPT
 	"postscript",
 #endif
Index: version.c
===================================================================
--- version.c	(revision 1626)
+++ version.c	(working copy)
@@ -450,6 +450,11 @@
 #else
 	"-python",
 #endif
+#ifdef FEAT_PYTHON_SCREEN
+	"+python_screen",
+#else
+	"-python_screen",
+#endif
 #ifdef FEAT_QUICKFIX
 	"+quickfix",
 #else
Index: configure.in
===================================================================
--- configure.in	(revision 1626)
+++ configure.in	(working copy)
@@ -817,6 +817,17 @@
 AC_SUBST(PYTHON_SRC)
 AC_SUBST(PYTHON_OBJ)
 
+AC_MSG_CHECKING(--enable-pythonscreen argument)
+AC_ARG_ENABLE(pythonscreen,
+	[  --enable-pythonscreen   Include Python Screen Access.], ,
+	[enable_pythonscreen="no"])
+AC_MSG_RESULT($enable_pythonscreen)
+if test "$enable_pythonscreen" = "yes"; then
+  if test $python_ok = yes; then
+    AC_DEFINE(FEAT_PYTHON_SCREEN)
+  fi
+fi
+
 AC_MSG_CHECKING(--enable-tclinterp argument)
 AC_ARG_ENABLE(tclinterp,
 	[  --enable-tclinterp      Include Tcl interpreter.], ,
Index: config.h.in
===================================================================
--- config.h.in	(revision 1626)
+++ config.h.in	(working copy)
@@ -302,6 +302,9 @@
 /* Define if you want to include the Python interpreter. */
 #undef FEAT_PYTHON
 
+/* Define if you want to include the Python interpreter Screen access. */
+#undef FEAT_PYTHON_SCREEN
+
 /* Define if you want to include the Ruby interpreter. */
 #undef FEAT_RUBY
 
